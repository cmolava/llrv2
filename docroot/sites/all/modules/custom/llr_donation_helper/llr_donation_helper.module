<?php
/**
 * @file llr_donation_helper.module
 */

/**
 * Key used by webform_civicrm for embedding a civicrm contribution page
 */
define('WF_CONTRIB_ELEM', 'civicrm_1_contribution_1_contribution_contribution_page_id');

/**
 * Implements hook_menu()
 */
function llr_donation_helper_menu() {
 $items = array();
 $items['donate/start'] = array(
   'title' => t('Donate'),
   'page callback' => 'llr_donation_donate_start_page',
   'access callback' => TRUE,
   'file' => 'llr_donation_start_page.inc',
   'type' => MENU_CALLBACK,
 );
 $items['donate/complete'] = array(
   'title' => 'Thank you for your donation!',
   'page callback' => 'llr_donation_donate_complete_page',
   'access callback' => 'llr_donation_donate_complete_access',
   'file' => 'llr_donation_complete_page.inc',
   'type' => MENU_CALLBACK,
 );
 return $items;
}


 
function llr_donation_helper_preprocess_page(&$variables) {
  if ( llr_donation_is_a_donation_page() ) {
////    $variables['theme_hook_suggestion'] = 'page__bare';
    $variables['is_donation_page'] = TRUE;
  }

}

/**
 * Implements hook_theme_registry_alter()
 */
function llr_donation_helper_theme_registry_alter(&$registry) {
  //
  if ( empty($registry['page__bare']) ) {
    $registry['page__bare'] = $registry['page'];
  }
  $registry['page__bare']['template'] = 'page--bare';
  $registry['page__bare']['render element'] = 'page';
  $registry['page__bare']['theme paths'][] = drupal_get_path('module', 'llr_donation_helper') . '/templates';
  $registry['page__bare']['path'] = drupal_get_path('module', 'llr_donation_helper') . '/templates';
}

/**
 * Implements hook_init()
 */
function llr_donation_helper_init() {
  //Exclude donate start/complete pages from the page cache
  $path = $_GET['q'];
  if ( in_array($path , array('donate/start', 'donate/complete')) ) {
    drupal_page_is_cacheable(FALSE);
  }
}

/**
 * Access callback for donation complete page
 */
function llr_donation_donate_complete_access() {
  $prev_vals = llr_webform_retrieve_values('llr_donate');
  return true; //! empty($prev_vals['complete']);
}

/**
 * Implements hook_preprocess_webform_progressbar()
 */
function llr_donation_helper_preprocess_webform_progressbar(&$variables) {
  if ( empty($variables['node']->llr_webform['name']) || ! $variables['page_count'] ) {
    return;
  }
  $name = $variables['node']->llr_webform['name'];
  //We are only interested in donate forms.
  if ( ! in_array($name, array('webform_donate_monthly', 'webform_donate_single')) ) {
    return;
  }

   //The donate start form has been completed but is external to the
  //webform so we prepend it to the progressbar
  $variables['page_num']++;
  $variables['page_count']++;
  array_unshift($variables['page_labels'], $variables['page_labels'][0]);
  $variables['page_labels'][1] = 'Personal Details';
  $variables['percent'] = (($variables['page_num'] -1) / ($variables['page_count'] -1)) * 100;
}



function llr_donation_helper_civicrm_validateForm( $formName, &$fields, &$files, &$form, &$errors ) {
  if ( 'CRM_Contribute_Form_Contribution_Main' == $formName ) {
    //Supress state-province errors set by CRM_Form_Core::validateChainSelect
    //$form->setElementError('billing_state_province_id-5', NULL);
  }
}

/**
 * Implements hook_civicrm_BuildForm()
 */
function llr_donation_helper_civicrm_BuildForm($formName, &$form) {
//    watchdog('llr_debug', 'Altering form %name : <pre> %f </pre>', array('%name' => $formName, '%f' => print_r($form->_paymentFields, true)));
  /**
  watchdog('llr_debug', 'Altering form %name : <pre> %f </pre> prevals <pre>%v</pre>', array('%v' => print_r($prev_vals, true),'%name' => $formName, '%f' => print_r($form, true)));
  if ( 'CRM_Contribute_Form_Contribution_Main' == $formName ) {
    $prev_vals = llr_webform_retrieve_values('llr_donate');

    $elem_name = 'billing_state_province_id-5';
    if ( $form->elementExists($elem_name) ) {
  //    kpr($form);
//      $elem = $form->getElement('billing_state_province_id-5');
     $form->_paymentFields[$elem_name]['is_required'] = FALSE;
     $form->removeElement($elem_name);
     $form->addChainSelect($elem_name, array('required' => false));
    watchdog('llr_debug', 'DefaultValues <pre>%e</pre>', array('%e' =>  print_r($elem, true)));
    }
     
  }
  **/
}

/**
 * Implements hook_form_alter()
 */
function llr_donation_helper_form_alter(&$form, &$form_state, $form_id) {
  //Only deal with webform forms
  $is_webform =  0 === strpos($form_id, 'webform_client_form');
  if ( ! $is_webform ||  empty($form['#node']) || empty($form['#node']->llr_webform['name'])) {
    return;
  }
  $name = $form['#node']->llr_webform['name'];
  $path = drupal_get_path('module', 'llr_donation_helper');
  
  //Only deal with donate forms
  if  (! in_array($name, array('webform_donate_monthly', 'webform_donate_single')) ) {
    return;
  }
  //Is Webform node  displayed in full view?
  $page_obj = menu_get_object();
    if ( empty($page_obj->nid) || $page_obj->nid != $form['#node']->nid ) {  
      //Webform is displayed as block or in summary view. 
      //All we can do here is hide the form
      $form['#access'] = FALSE;
      return;
  }
  //Do we have donation amount  from the start form?
  $prev_values = llr_webform_retrieve_values('llr_donate');
  if ( empty( $prev_values['donate_amount']) ) {
      drupal_goto('donate/start');
      return;
  }
  //Add submission handler
   $form['#submit'][] = 'llr_donation_webform_donate_submit';
  
  //Set the title to include the donation amount
  $amount =  llr_donation_get_donation_value($form_state, $prev_values, $name);
  llr_donation_set_donation_title($name, $amount);

   //hide webform's previous button, remove this block if requirements change
  if ( ! empty($form['actions']['previous']) ) {
      $form['actions']['previous']['#access'] = FALSE;
   }

  //Add postcode lookup to contact address
  if ( ! empty($form['submitted']['civicrm_1_contact_1_fieldset_fieldset']) ) {
    llr_donate_insert_postcode_lookup($form);
  }
  //Page 1 alterations
  if ( 1 == $form_state['webform']['page_num'] ) {
    //Add nudge
    $nudge = llr_donation_get_nudge_for_amount($amount, $name);
    drupal_add_js(array('LLRDonate' => array('nudge' => $nudge)), array(
      'type' => 'setting',
      'cache' => FALSE,
      'preprocess' => FALSE,
    ));
    
    //Previous button takes user to donate-start page.
    
    $form['actions']['llr_donate_to_start'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#weight' => 5,
      '#attributes' => array(
        'class' => array('webform-previous'), 
        'formnovalidate' => 'formnovalidate'
      ),
      '#limit_validation_errors' => array(),
      '#submit' => array('llr_donation_helper_back_to_start'),

      //Note, for now this is hidden. should
       //requirements change, remove the line below
      '#access' => FALSE,
    );
  }
  //Displaying a civi contribution payment page 
  if ( ! empty( $form['submitted'][WF_CONTRIB_ELEM]) ) {
    //Prepopulate billing address fields 
    $address =  llr_donation_billing_address_field_values($form_state);
    drupal_add_js(array(
      'LLRDonate' => array(
        'billing_name_address_fields' => $address,
      )
    ), 'setting');

    //Alter submit button label
    $form['actions']['submit']['#value'] = t('Donate !amount',
      array('!amount' => 'Â£' . $amount));
     
    $form['#validate'][] = 'llr_donation_webform_donate_validate';
    //Contribution and other transactions expect invoice_id in params but neither 
    //civicrm_api  nor webform_civicrm generate one <= CiviCRM v4.6
    //It is used as the trx code to the payment gateway, so we add it here.
    //todo: move this to general civi/webform processing.

  }//end contrib payment page only 

  $form['#attributes']['class'][] = str_replace('_', '-', $name);
  $form['#attributes']['class'][] = 'webform-donate';
  $form['#attached']['js'][] = $path . '/js/llr_donation.js';
  $form['#attached']['css'][] = $path . '/css/llr_donation.css';
}

//We may here grab the address items to repopulate the billing address
function llr_donation_webform_donate_validate($form, &$form_state) {
 
  watchdog('llr_donate', 'validate: form state is: <pre>%val</pre>', array('%val' => print_r($form_state, true)));
}

/**
 * Submit handler for a named donate webform_client_form
 */
function llr_donation_webform_donate_submit($form, &$form_state) {
  $prev_vals = llr_webform_retrieve_values('llr_donate');
  module_load_include('inc', 'webform', 'webform.submissions');
  $submission_data = llr_webform_unpack_submission_values($form_state);
  $prev_vals['webform'] = $submission_data;
  llr_webform_store_values('llr_donate', $prev_vals);
  watchdog('llr_donate', 'submission data is: <pre>%val</pre>', array('%val' => print_r($submission_data, true)));
  if ( empty($form_state['webform_completed']) ) {
    //Add address country value from country id,
    return;
  }
  //llr_webform_clear_values('webform_donate_monthly');
  //Send details to the complete form
  $form_state['redirect'] = '/donate/complete';
}

/**
 * Adds some values for payment
 */
/**
function _llr_donation_helper_preprocess_payment(&$form, &$form_state) {
  $values &= $form_state['values']['submitted'];
  if ( ! empty($values['billing_country_id-5']) && empty($values['billing_country-5']) ) {
    $country = _llr_donation_helper_civicrm_country($values['billing_country_id-5']);
    $country_iso = $country['iso_code'];
    $values['billing_country-5'] = $country_iso;
  }
}
**/

/**
 * Gets a civicrm country by id
 */
function _llr_donation_helper_civicrm_country($id) {
  static $countries;
  if ( ! isset($countries[$id]) ) {
    $result = civicrm_api3('Country', 'get', array(
      'sequential' => FALSE,
      'id' => $id,
    ));
    if ( empty($result['is_error']) ) {
      $countries[$id] = $result['values'][$id];
    }
  }
  return empty($countries[$id]) ? array() : $countries[$id];
}

/**
 * Submission handler for the back_to_start button
 */
function llr_donation_helper_back_to_start($form, &$form_state) {
  $start_vals = llr_webform_retrieve_values('llr_donate');
  $start_vals['webform'] = $form_state;
  llr_webform_store_values('llr_donate', $start_vals);
  drupal_goto('donate/start');
}

/**
 * Maps civi contact address fields to contribution billing address fields
 */
function llr_donation_billing_address_field_values( &$form_state) {
  
  //webform_civicrm renders Contribution payment as embedded snippets via an ajax callback
  //We can access the form within hook_civicrm_BuildForm, however it is difficult
  //to determine whethe the form is being built within the context of a webform.
  //Instead, we send the address values as js settings and populate fields on the client.
  civicrm_initialize();
  $billing_data = array();
  $contact_container = 'civicrm_1_contact_1_fieldset_fieldset';
  $values = $form_state['values']['submitted'];
  $contact_elements = $form_state['complete form']['submitted'][$contact_container];

  if ( empty($contact_elements) ) {
    return $billing_data;
  }

  $from_prefix = 'civicrm_1_contact_1_';
  $billing_to_contact_map = array (
    'billing_first_name' => 'contact_first_name',
    'billing_last_name' => 'contact_last_name',
    'billing_street_address-5' => 'address_street_address',
    'billing_city-5' => 'address_city',
    'billing_country_id-5' => 'address_country_id',
    'billing_state_province_id-5' => 'address_state_province_id',
    'billing_postal_code-5' => 'address_postal_code',
  );
  foreach ( $billing_to_contact_map as $b_field => $c_field ) {
    $cid = $contact_elements[$from_prefix . $c_field]['#webform_component']['cid'];
    $billing_data[$b_field] = $values[$cid];
  }
  
  //Convert state province options

  //The contact form uses abbreviations but the billing form uses civi internal id.
  //Better to use civicrm_api but does not seem to provide state_province.
  if ( ! empty($billing_data['billing_state_province_id-5']) ) {
    $state_provinces = CRM_Core_PseudoConstant::stateProvinceAbbreviation();
    $key = array_search($billing_data['billing_state_province_id-5'], $state_provinces);
    $billing_data['billing_state_province_id-5'] = $key;
  }
  
  return $billing_data;
}

/**
 * Gets the nudge setting for a particular donation amount.
 */
function llr_donation_get_nudge_for_amount($amount, $webform_name) {
  $settings = variable_get('llr_donation', llr_donation_default_settings());
  $key = str_replace('webform_donate_', 'nudges_', $webform_name);
  if ( $settings[$key] ) {
    $nudges = $settings[$key];          
    foreach ( $nudges as $nudge ) {
      $shortfall = $nudge['target_value'] - $amount; 
      if ( $shortfall > 0 && $shortfall <= $nudge['threshold'] ) {
        $nudge['text'] = str_replace('{shortfall}', $shortfall, $nudge['text']);
        $nudge['shortfall'] = $shortfall;
        $nudge['button_text'] = 'Go on then add Â£' . $shortfall;
        return $nudge;
      }
    }
  }
}

/**
 * Helper function gets the current donation amount from the current
 * donation webform.
 *
 * @params $form_state: The form_state array from a donation webform;
 * @params $start_values: The data passed by the donate start form.
 */
function llr_donation_get_donation_value($form_state, $start_values=array(), $name='') {
  $amount_form_key = 'civicrm_1_contribution_1_contribution_total_amount';
  if ( ! empty($form_state['webform']['component_tree']['children']) ) {
    foreach ( $form_state['webform']['component_tree']['children'] as $cid => $component ) {
      $found_cid = $component['form_key'] == $amount_form_key; 
      $val = ! empty($form_state['values']['submitted'][$cid]) ? $form_state['values']['submitted'][$cid] : '';
      if ( $found_cid && $val ) {
        //If a new value has been submitted it overrides the one from the start;
        if ( $start_values && $name ) {
          $start_values['donate_amount'] = $val;
          llr_webform_store_values('llr_donate', $start_values);
        }
        return $val;
      }
    }
  }
  if ( ! empty($start_values['donate_amount']) ) {
    return $start_values['donate_amount'];
  }
}

/**
 * Sets the page title for donation forms.
 * @param $name: the name of the form llr_webform machine-name or form_id
 * @param $amount : value of donation
 */
function llr_donation_set_donation_title($name, $amount) {
    $params = array('!amount' => 'Â£' . $amount);
      $stitle['main'] =  t('You are donating !amount to beat blood cancer',$params);
      $stitle['thankyou'] =  t('Thank you. Your donation of %amount to help beat blood cancer has been successful', $params);
      $mtitle['main'] =  t('You are donating !amount a month to beat blood cancer', $params);
      $mtitle['thankyou'] =  t('Thank you. Your donation of %amount a month to help beat blood cancer has been successful', $params);
    if ( 'webform_donate_monthly' == $name ) {
      $title = $mtitle['main'];
    }
    elseif ( 'webform_donate_single' == $name ) {
      $title = $stitle['main'];
    }
    drupal_set_title($title);
}

/**
 * Implements hook_webform_component_render_alter() 
 *
 */
function llr_donation_helper_webform_component_render_alter(&$element, &$component) {
  //Here we can access components by name rather than traverse form
  //trees as we would need to do in a  form_alter
  //Cache our data since this is called for each component in the form;
  $data = &drupal_static(__FUNCTION__);
  $nid = $component['nid'];
  if ( ! isset($data[$nid]) ) {
    $data[$nid] = array();
    $name = llr_webform_get_name_by_id($nid);
    if (!  $name ) {
      return;
    }
    $data[$nid]['name'] = $name;
    $data[$nid]['data'] = llr_webform_retrieve_values('llr_donate');
  }
  $values = $data[$nid]['data'];
  switch ( $component['form_key'] ) {
    case  'civicrm_1_contribution_1_contribution_total_amount' :
      $amount = $element['#default_value']; 
      $orig_amount = ! empty($values['donate_amount']) ? $values['donate_amount'] : '';
      //if $amount exists it is more recently submitted than $values
      $element['#default_value'] = $amount? $amount : $orig_amount;
      $component['extra']['wrapper_classes'] .= 'populated';
      break;
    case  'civicrm_1_contribution_1_contribution_payment_processor_id' :
      break;
  }
}

/**
 * Inserts a postcode lookup widget into donate webform
 * 
 *  Works best with the address fields are arranged contiguously within
 * a civicrm contact fieldset, with the country field first.
 */
function llr_donate_insert_postcode_lookup(&$form) {
  //These address field names are for civi contact in webform
  //(assuming the default label for the contact is used: contact 1);
  //Need to separate the address representations from the mechanics
  //of bridging Qas API with drupal form API.
  //(Perhaps good candidate for OOP implementation)
  
   
  $address_container = 'civicrm_1_contact_1_fieldset_fieldset';
  //Webform components are children of 'submitted' element
  if ( empty($form['submitted'][$address_container]) ) {
    return;
  }
  $form_id = 'webform-uuid-' . $form['#node']->uuid;
  $prefix = 'civicrm_1_contact_1_address';
  //A base mapping for address fields
  //Values are the format used by Qas, Keys are civi/webform
  $base_map = array(
    'street_address' => 'addr_line_1',
    'supplemental_address_1' => 'addr_line_2',
    'city' => 'town',
    'postal_code' => 'postcode',
    //Only UK supported so country not in mapping
//    'country_id' => , 
    'state_province_id' => 'county',
  );

  foreach ( $base_map as $fname => $qname ) {
    $name = str_replace('_', '-', 'edit-submitted-' . $address_container . '-' . $prefix . '-' . $fname);
    $qas_map[$name] = $qname;
  }
  $config = array (
    'showHouseNo' => FALSE,
    'targetIsSrc' => TRUE,
    'index' => 0,
    'lookupControlsContainerClass' => '',
    'input' => array(
      'houseNo' => 0,
      'postcode' => 0,
    ),
    //Info about the form with address fields to populate
    'target' => array(
      //
      'id' => $form_id,
      'dynamicFieldIds' => FALSE,
      'formToQasFieldMap' => $qas_map,
    ),
  );  
  drupal_add_library('system', 'drupal.ajax');
  //Get the form elements for lookup as renderable array
  $lookup_form_elements = llr_postcode_lookup_raw_query_form_elements($config);
   //The container may have non-address fields but we expect address fields to be contiguous, with  country first.
  //Country should be first so we can hide the postcode lookup for non-UK
  //Seek and insert after element
  $offset = 1;
  $elem = $prefix . '_country_id';
  foreach( $form['submitted'][$address_container] as $k => $v ) {
    if ( $k == $elem ) {
      break;
    }
    $offset++;
  }
  $form['submitted'][$address_container] = llr_postcode_lookup_merge_lookup_controls($form['submitted'][$address_container], $lookup_form_elements, $offset);
  
  //Adjust weights
  $elems = element_children($form['submitted'][$address_container]);
  $i = $form['submitted'][$address_container][$elems[0]]['#weight'];
  foreach ( $elems as $key ) {
    $form['submitted'][$address_container][$key]['#weight'] = $i;
    $i++;
  }
  //Add js and settings
  llr_postcode_lookup_add_query_form_attachments($form);
  llr_postcode_lookup_add_script_settings($form_id, $config);
}


/**
 * Determines whether we are on a donation page() 
 */
function llr_donation_is_a_donation_page() {
  static $ret = NULL;
  if ( is_null($ret) ) {
    $webforms = array(
      'webform_donate_single', 
      'webform_donate_monthly', 
      'webform_donate_in_mem',
    );
    $paths = array(
      'donate/start',
      'donate/complete'
    ); 
    $path = $_GET['q'];
    if ( in_array($path, $paths) ) {
      $ret = TRUE;
    }
    else {
      $node = menu_get_object();
      $name = !empty($node->llr_webform['name']) ? $node->llr_webform['name'] : '';
      $ret =  in_array($name, $webforms);
    }
  }
  return $ret;
}

/**
 * Some default settings
 */
function llr_donation_default_settings() {
  return array(
    'donation_amounts' => array(
      array(
        'value' => 3.0,
        'fact' => 'For every Â£3 we receive we can do x',
        'monthly' =>TRUE,  
        'single' =>FALSE,  
      ),
      array(
        'value' => 5.0,
        'fact' => 'For every Â£5 we receive we can do x',
        'monthly' =>TRUE,  
        'single' =>TRUE,  
      ),
      array(  
        'value' => 10.0,
        'fact' => 'For every tenner we receive we can do x',
        'monthly' =>TRUE,  
        'single' =>TRUE,  
      ),
      array(
        'value' => 20.0,
        'fact' => 'For every Â£20 we receive we can do x',
        'monthly' => FALSE,  
        'single' =>TRUE,  
      ),
    ),
    //nudges
    'nudges_button_label' => 'Go on then, add Â£{shortfall}',
    'nudges_accept_msg' => '',
    'nudges_single' => array(
      array(
        'target_value' => 10.0,
        'threshold' => 2,
        'text' => 'Increasing your donation by just Â£{shortfall} means that we can xxxxxxxx ten pounds.',

      ),
      array(
        'target_value' => 100.0,
        'threshold' => 20,
        'text' =>  'Increasing your donation by just Â£{shortfall} means that we can xxxxxxxx one hundred pounds.',
      ),
    ),//end nudges_single
    'nudges_monthly' => array(
      array(
        'target_value' => 4.0,
        'threshold' => 2,
        'text' => 'Increasing your donation by just Â£{shortfall} a month means that we can xxxxxxxx ten pounds.',

      ),
      array(
        'target_value' => 11.0,
        'threshold' => 3,
        'text' =>  'Increasing your donation by just Â£{shortfall}  a month means that we can xxxxxxxx one hundred pounds.',
      ),
    ),//end nudges_single
    'titles_single' => array(
      'main' => 'You are donating Â£{amount} to beat blood cancer',
      'thank_you' => '',
    ),
    'titles_monthly' => array(
      'main' => 'You are donating Â£{amount} a month to beat blood cancer',
      'thank_you' => '',
    ),
  );
}

