<?php

/**
 * Implements hook_block_info
 */
function llr_register_block_info() {
  $blocks['llr_register_form'] = array(
    'info' => t('Custom registration block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function llr_register_block_view($delta='') {
  $block = array();
  switch ( $delta ) {
    case 'llr_register_form' :
      $block['subject'] = t('Register');
      $block['content'] = drupal_get_form('llr_register_registration_form');
      break;
  }
  return $block;
}


/**
 * Form builder for llr_register_form
 */
function llr_register_registration_form($form, &$form_state) {

  $form = array(
    '#tree' => FALSE,
    '#prefix' => '<div id="registration-form-wrapper">',
    '#suffix' => '</div>',
    '#user_category' => 'register',
    '#user' => drupal_anonymous_user(), 
    '#validate' => array('user_account_form_validate', 'llr_register_registration_form_validate'),
  );
  $account['name'] = array(
    '#title' => t('Username'),
    '#description' => t('Choose your username'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $account['mail'] = array(
    '#title' => t('email'),
    '#description' => t('Enter a valid email address'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#maxlength' => EMAIL_MAX_LENGTH,
  );
  $account['pass'] = array(
    '#title' => t('Password'),
    '#placeholder' => t('Password'),
    '#description' => t('Enter a password'),
    '#type' => 'password',
    '#required' => TRUE,
  );
  $account['#type'] = 'container';
  
  //Default values may be passed in the call to drupal_get_form and the 
  //pre-populated fields will be hidden
  //User submitted values take precedence. 
  $default =   ! empty($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0] : array();
  $submitted = ! empty($form_state['values']) ? $form_state['values'] : array();
  $vals = array_merge($default, $submitted);
  foreach ( $vals as $key => $value ) {
    if ( ! empty($account[$key]) && $value ) {
      $account[$key]['#default_value'] = $value;
      $account[$key]['#access'] = empty($default[$key]);
    }
  }
  $form['account'] = $account;
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
   );
  return $form;
}

function llr_register_registration_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $values['init'] = $values['mail'];
  $account = $form['#user'];
  $account->is_new = TRUE;
  if ( llr_register_get_uid_by_name($values['name']) ) {
    //According to our guidelines, we append the uid to username
    $account->uid = db_next_id(db_query('SELECT MAX(uid) FROM {users}')->fetchField());
    $values['name'] .= $account->uid;
  }
  $account = user_save($account, $values);
  $mailsent = _user_mail_notify('register_no_approval_required', $account);
  drupal_set_message('Registration successful.');
}

/**
 * Form validation for registration form
 * user_account_form() should be called back to perform standard validation.
 * We add any extra validation requirements here.
 */
function llr_register_registration_form_validate(&$form, &$form_state) {
  $min_pass_len = 6;
  if ( empty($form_state['values']['pass']) || $min_pass_len > strlen($form_state['values']['pass']) ) {
    form_set_error('pass', t('Password should be at least %min characters long', array('%min' => $min_pass_len)));
  }
}

/**
 * Ajax callback for registration form
 *
function  llr_register_registration_form_ajax($form, &$form_state) {
  //The whole form is replaced.
  return $form;
}
**/

/**
 * Check values which are to be included as prepopulated hidden values
 * in registration form.
 * Similar to validating but we don't throw form but instead remove from the
 * returned array.
 */
function llr_register_sanitize_values($values) {
  if ( ! empty($values['mail'])  ) {
    if ( user_validate_mail($values['mail']) || llr_register_get_uid_by_mail($values['mail']) ) {
      unset($values['mail']);
    }
  }
  if ( ! empty($values['name']) ) {
    $illegal = '/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i';
    $values['name'] = preg_replace( $illegal,'', trim($values['name']));
    if ( user_validate_name($values['name']) ) {
      unset($values['name']);
    }
  }
  return $values;
}

/**
 * Returns the uid of a name if it exists for a user
 */
function llr_register_get_uid_by_name($name) {
  return llr_register_get_uid('name', $name);
}

/**
 * Returns the uid of a mail address if it exists for a user
 */
function llr_register_get_uid_by_mail($mail) {
  return llr_register_get_uid('mail', $mail);
}

/**
 * Returns the uid of a user by unique property
 */
function llr_register_get_uid($prop, $val) {
  if (! $val || ! in_array($prop, array('mail', 'name')) ) {
    return 0;
  }
  return  db_select('users')
    ->fields('users', array('uid'))
    ->condition($prop, db_like($val), 'LIKE')
    ->range(0,1)->execute()
    ->fetchField();
}
